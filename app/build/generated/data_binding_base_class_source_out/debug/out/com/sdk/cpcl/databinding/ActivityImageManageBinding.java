// Generated by view binder compiler. Do not edit!
package com.sdk.cpcl.databinding;

import android.view.LayoutInflater;
import android.view.View;
import android.view.ViewGroup;
import android.widget.Button;
import android.widget.LinearLayout;
import android.widget.Spinner;
import android.widget.TextView;
import androidx.annotation.NonNull;
import androidx.annotation.Nullable;
import androidx.viewbinding.ViewBinding;
import androidx.viewbinding.ViewBindings;
import com.sdk.cpcl.R;
import java.lang.NullPointerException;
import java.lang.Override;
import java.lang.String;

public final class ActivityImageManageBinding implements ViewBinding {
  @NonNull
  private final LinearLayout rootView;

  @NonNull
  public final Button btnDeleteAll;

  @NonNull
  public final Button btnDeleteOne;

  @NonNull
  public final Button btnDownload;

  @NonNull
  public final Button btnPrint;

  @NonNull
  public final TextView itemName3;

  @NonNull
  public final Spinner spnImageIndex;

  @NonNull
  public final TextView txtCounter;

  @NonNull
  public final TextView txtSpace;

  private ActivityImageManageBinding(@NonNull LinearLayout rootView, @NonNull Button btnDeleteAll,
      @NonNull Button btnDeleteOne, @NonNull Button btnDownload, @NonNull Button btnPrint,
      @NonNull TextView itemName3, @NonNull Spinner spnImageIndex, @NonNull TextView txtCounter,
      @NonNull TextView txtSpace) {
    this.rootView = rootView;
    this.btnDeleteAll = btnDeleteAll;
    this.btnDeleteOne = btnDeleteOne;
    this.btnDownload = btnDownload;
    this.btnPrint = btnPrint;
    this.itemName3 = itemName3;
    this.spnImageIndex = spnImageIndex;
    this.txtCounter = txtCounter;
    this.txtSpace = txtSpace;
  }

  @Override
  @NonNull
  public LinearLayout getRoot() {
    return rootView;
  }

  @NonNull
  public static ActivityImageManageBinding inflate(@NonNull LayoutInflater inflater) {
    return inflate(inflater, null, false);
  }

  @NonNull
  public static ActivityImageManageBinding inflate(@NonNull LayoutInflater inflater,
      @Nullable ViewGroup parent, boolean attachToParent) {
    View root = inflater.inflate(R.layout.activity_image_manage, parent, false);
    if (attachToParent) {
      parent.addView(root);
    }
    return bind(root);
  }

  @NonNull
  public static ActivityImageManageBinding bind(@NonNull View rootView) {
    // The body of this method is generated in a way you would not otherwise write.
    // This is done to optimize the compiled bytecode for size and performance.
    int id;
    missingId: {
      id = R.id.btnDeleteAll;
      Button btnDeleteAll = ViewBindings.findChildViewById(rootView, id);
      if (btnDeleteAll == null) {
        break missingId;
      }

      id = R.id.btnDeleteOne;
      Button btnDeleteOne = ViewBindings.findChildViewById(rootView, id);
      if (btnDeleteOne == null) {
        break missingId;
      }

      id = R.id.btnDownload;
      Button btnDownload = ViewBindings.findChildViewById(rootView, id);
      if (btnDownload == null) {
        break missingId;
      }

      id = R.id.btnPrint;
      Button btnPrint = ViewBindings.findChildViewById(rootView, id);
      if (btnPrint == null) {
        break missingId;
      }

      id = R.id.itemName3;
      TextView itemName3 = ViewBindings.findChildViewById(rootView, id);
      if (itemName3 == null) {
        break missingId;
      }

      id = R.id.spnImageIndex;
      Spinner spnImageIndex = ViewBindings.findChildViewById(rootView, id);
      if (spnImageIndex == null) {
        break missingId;
      }

      id = R.id.txtCounter;
      TextView txtCounter = ViewBindings.findChildViewById(rootView, id);
      if (txtCounter == null) {
        break missingId;
      }

      id = R.id.txtSpace;
      TextView txtSpace = ViewBindings.findChildViewById(rootView, id);
      if (txtSpace == null) {
        break missingId;
      }

      return new ActivityImageManageBinding((LinearLayout) rootView, btnDeleteAll, btnDeleteOne,
          btnDownload, btnPrint, itemName3, spnImageIndex, txtCounter, txtSpace);
    }
    String missingId = rootView.getResources().getResourceName(id);
    throw new NullPointerException("Missing required view with ID: ".concat(missingId));
  }
}
